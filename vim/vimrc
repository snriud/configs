" General
" =======
set history=1000    " History
filetype on         " Auto detech filetype
filetype indent on  " Auto indent
filetype plugin on  " vim-go

set nocompatible    " No compatible mode
set autoread        " Auto read file modifies
"set paste           " Keep format while paste

set encoding=utf8   " Encoding utf8

set updatetime=300  " updatetime

" Misc
" ====
set background=dark
syntax on
set showmode
" set colorcolumn=80      " Specific a breakline column
set cursorline " hightlight cursorline
set cursorcolumn
set number     " show linenumber
set linespace=0 " No extra spaces between rows
set hlsearch   " Hightlight search terms
set incsearch  " Find as you type search
set smartcase
set ignorecase

" Formatting
" ==========
"set nowrap          " No auto break line
set autoindent      " Auto indent

set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4

set nojoinspaces
set splitright
set splitbelow
set showmatch       " Show match
set matchtime=1     " Matchtime 100ms
set mat=2

"set foldenable      " Fold code
"set foldmethod=syntax
"set foldcolumn=1

" Status
" ======
set ruler
set showcmd
set so=8            " When scroll line, keep 7 lines
set cmdheight=1

" Color and Syntax
" ================
syntax enable
syntax on

" Plugins
" =======
call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" 可以快速对齐的插件
" Plug 'junegunn/vim-easy-align'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" 可以使 nerdtree 的 tab 更加友好些
Plug 'jistr/vim-nerdtree-tabs'

" 可以在导航目录中看到 git 版本信息
Plug 'Xuyuanp/nerdtree-git-plugin'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件，包括小括号，中括号，以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'

" 代码自动完成，安装完插件还需要额外配置才可以使用
" use COC instead, COC is better than YouCompleteMe
"Plug 'Valloric/YouCompleteMe'

" 可以在文档中显示 git 信息
Plug 'airblade/vim-gitgutter'

" 下面两个插件要配合使用，可以自动生成代码块
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" 可以在 vim 中使用 tab 补全
" Plug 'vim-scripts/SuperTab'

" 可以在 vim 中自动完成
" Plug 'Shougo/neocomplete.vim'

" 配色方案
" colorscheme neodark
Plug 'KeitaNakamura/neodark.vim'

" colorscheme monokai
Plug 'crusoexia/vim-monokai'

" colorscheme github
Plug 'acarapetis/vim-colors-github'

" colorscheme one
Plug 'rakr/vim-one'

" go 主要插件
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }

" go 中的代码追踪，输入 gd 就可以自动跳转
"Plug 'dgryski/vim-godef'

" go struct split and join
" Plug 'AndrewRadev/splitjoin.vim'

" go live code
" Plug 'SirVer/ultisnips'

" git 信息
Plug 'tpope/vim-fugitive'

" 文件跳转
Plug 'ctrlpvim/ctrlp.vim'

" Rust
" Plug 'rust-lang/rust.vim'

" COC
" use rustup component add rust-analyzer to install rust-analyzer
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" ale
"Plug 'dense-analysis/ale'

" Rust Analyzer
" Plug 'prabirshrestha/vim-lsp'

" JSON format
Plug 'xadillax/json-formatter.vim'

" markdown preview
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" codeium copilot
Plug 'Exafunction/codeium.vim', { 'branch': 'main' }

" 插件结束的位置，插件全部放在此行上面
call plug#end()

" theme
" ======

" 开启24bit的颜色，开启这个颜色会更漂亮一些
set termguicolors
" 配色方案, 可以从上面插件安装中的选择一个使用
colorscheme one " 主题
" colorscheme github " 主题
" colorscheme monokai " 主题
" colorscheme neodark " 主题
set background=dark " 主题背景 dark-深色; light-浅色

" tagbar plugin
" =============
" majutsushi/tagbar 插件打开关闭快捷键
nmap <C-m> :TagbarToggle<CR>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:rust_use_custom_ctags_defs = 1
let g:tagbar_type_rust = {
  \ 'ctagsbin' : '/opt/homebrew/bin/ctags',
  \ 'ctagstype' : 'rust',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" nerdTree plugin
" ===============
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeGitStatusShowIgnored=0

" 显示行号
let NERDTreeShowLineNumbers=1
" 打开文件时是否显示目录
let NERDTreeAutoCenter=0
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
" let NERDTreeWinSize=31
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开 vim 文件及显示书签列表
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1

" go test timeout
" let g:go_test_timeout = '3600s'

" same identifiers highlight
"let g:go_auto_sameids=1

" ALE
" ===

"let g:ale_pattern_options = {
"\   '.*\.go$': {'ale_enabled': 0},
"\}

" Rust
" =============
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

" rust analyzer plugin
" ====================
if executable('rust-analyzer')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'Rust Language Server',
        \ 'cmd': {server_info->['rust-analyzer']},
        \ 'whitelist': ['rust']
        \ })
endif

" coc
" ============
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation, and <C-o> can go back
nmap <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" vim-go
" ======
let g:go_fmt_command = "goimports"

" codeium
" =======

let g:codeium_disable_bindings = 1

" imap <script><silent><nowait><expr> <C-g> codeium#Accept()
imap <script><silent><nowait><expr> <C-g> codeium#Accept()
imap <C-;>   <Cmd>call codeium#CycleCompletions(1)<CR>
imap <C-,>   <Cmd>call codeium#CycleCompletions(-1)<CR>
imap <C-x>   <Cmd>call codeium#Clear()<CR>

" Key Mapping
" ===========
map <C-j> <C-W>j
map <C-h> <C-W>h
map <C-k> <C-W>k
map <C-l> <C-W>l
map <C-t> <C-o>
map 0 ^
map <C-n> :NERDTreeToggle<CR>
" map <C-i> :GoDecls<CR>
map <C-i> :CocList outline<CR>
map <C-o> :CocList symbols<CR>
